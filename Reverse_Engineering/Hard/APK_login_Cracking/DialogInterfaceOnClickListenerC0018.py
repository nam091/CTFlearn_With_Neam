import array

# Dictionary mapping integers to byte arrays
data_map = {
    483: [-96, -111, -126, -112, -117, -96, -126, -105, -128, -117, -122, -111],
    514: [86, 107, 118, 110, 103, 76, 109, 118, 107, 100, 107, 97, 99, 118, 107, 109, 108],
    525: [76, 99, 121, 100, 64, 98, 105],
    559: [97, 78, 66, 74],
    578: [18, 35, 33, 41, 35, 37, 39],
    591: [11, 42, 59, 42, 44, 59, 42, 43, 111, 14, 31, 4, 111, 2, 32, 43, 38, 41, 38, 42, 43, 111, 11, 46, 59, 46, 110],
    612: [50, 42, 5, 9, 1],
    630: [32, 53, 25, 18, 19],
    642: [-58, -25, -10, -25, -31, -10, -25, -26, -94, -61, -46, -55, -94, -49, -19, -26, -21, -28, -21, -25, -26, -94, -58, -29, -10, -29, -93],
    657: [-62, -8, -10, -1, -46, -7, -12, -14, -6, -12, -29],
    668: [-49, -11, -5, -14, -3, -24, -23, -18, -7],
    689: [-11, -44, -59, -44, -46, -59, -44, -43, -111, -16, -31, -6, -111, -62, -40, -42, -33, -48, -59, -60, -61, -44, -111, -43, -34, -44, -62, -111, -33, -34, -59, -111, -36, -48, -59, -46, -39, -112],
    702: [-20, -47, -47, -54, -3, -42, -37, -35, -43, -37, -52],
    720: [-108, -75, -92, -75, -77, -92, -75, -76, -16, -126, -97, -97, -124, -15],
    733: [-79, -88, -66, -74, -92, -115, -68, -87, -66, -75, -72, -81, -98, -75, -72, -66, -74, -97, -78, -78, -79, -72, -68, -77],
    741: [-45, -42, -43, -43, -45, -93, -43, -43, -45, -95, -43, -43, -41, -96, -43, -43, -45, -42, -43, -43, -45, -35, -43, -43, -45, -48, -43, -43, -45, -90, -43, -43, -46, -43, -43, -43, -46, -48, -43, -43, -46, -42, -43, -43, -41, -96, -43, -43, -48, -41, -43, -43, -45, -93, -43, -43, -45, -93, -43, -43, -46, -47, -43, -43, -45, -90, -43, -43, -45, -48, -43, -43, -46, -42, -43, -43, -46, -42, -43, -43, -47, -36, -43, -43, -45, -96, -43, -43, -46, -42, -43, -43, -46, -47, -43, -43, -45, -44, -43, -43, -45, -90, -43, -43, -45, -90, -43, -43, -48, -42, -43, -43, -45, -48, -43, -43, -46, -41, -43, -43, -46, -45, -43, -43, -45, -36, -43, -43, -45, -42, -43, -43, -45, -48],
    752: [-76, -107, -124, -107, -109, -124, -107, -108, -48, -68, -123, -109, -101, -119, -48, -96, -111, -124, -109, -104, -107, -126, -47],
    765: [-91, -115, -110, -114, -104, -103, -66, -107, -104, -98, -106, -104, -113],
    785: [85, 116, 101, 116, 114, 101, 116, 117, 49, 73, 97, 126, 98, 116, 117, 48],
    798: [83, 127, 121, 119, 109, 117, 93, 118, 123, 125, 117, 123, 108],
    816: [116, 85, 68, 85, 83, 68, 85, 84, 16, 125, 81, 87, 89, 67, 91, 17],
    829: [116, 83, 78, 73, 92, 81, 81, 88, 79, 126, 85, 88, 94, 86, 88, 79],
    848: [0, 60, 53, 49, 35, 53, 112, 57, 62, 35, 36, 49, 60, 60, 112, 49, 32, 59, 112, 63, 62, 112, 23, 63, 63, 55, 60, 53, 112, 0, 60, 49, 41, 113],
    861: [24, 48, 40, 30, 53, 56, 62, 54, 56, 47],
    879: [43, 10, 27, 10, 12, 27, 10, 11, 79, 46, 63, 36, 79, 61, 26, 1, 1, 6, 1, 8, 79, 6, 1, 79, 10, 2, 26, 3, 14, 27, 0, 29, 78],
    892: [24, 25, 10, 21, 31, 25, 48, 19, 31, 23, 62, 19, 19, 16, 25, 29, 18],
    912: [-12, -11, -26, -7, -13, -11, -36, -1, -13, -5, -61, -28, -30, -7, -2, -9],
    921: [-40, -23, -14, -55, -21, -10, -19, -4, -6, -19, -10, -21, -71, -54, -4, -6, -20, -21, -16, -19, -32],
    924: [-40, -7, -22, -11, -1, -7, -68, -48, -13, -1, -9, -67],
    939: [-49, -50, -55, -34, -52, -120, -93, -82, -88, -96, -119, -92, -92, -89, -82, -86, -91],
    955: [-6, -53, -48, -21, -55, -44, -49, -34, -40, -49, -44, -55, -101, -24, -34, -40, -50, -55, -46, -49, -62],
    958: [-6, -37, -54, -37, -35, -54, -37, -38, -98, -6, -37, -36, -53, -39, -97],
    971: [-81, -82, -87, -66, -84, -120, -93, -82, -88, -96, -119, -92, -92, -89, -82, -86, -91],
    986: [-101, -86, -79, -118, -88, -75, -82, -65, -71, -82, -75, -88, -6, -119, -65, -71, -81, -88, -77, -82, -93],
    989: [-103, -72, -87, -72, -66, -87, -72, -71, -3, -103, -72, -65, -88, -70, -4],
    1002: [-119, -126, -113, -119, -127, -68, -70, -92, -88, -123, -123, -122, -113, -117, -124],
    1020: [-72, -103, -120, -103, -97, -120, -103, -104, -36, -86, -84, -78, -35],
    1034: [66, 101, 101, 97, 73, 98, 111, 105, 97, 111, 120],
    1050: [82, 117, 117, 113, 105],
    1105: [21, 52, 37, 52, 50, 37, 52, 53, 113, 1, 56, 35, 48, 37, 52, 113, 16, 33, 33, 107, 91, 113],
    1134: [57, 11, 2, 13, 1, 3, 11],
    1146: [45, 31, 22, 25, 21, 23, 31, 55, 21, 30, 31],
    1154: [-43, -25, -18, -31, -19, -17, -25, -49, -15, -27],
    1198: [-99, -101],
    1476: [],
    1530: [-114, -113, -108],
    1540: [116, 116, 116],
    1550: [126, 126, 122, 126],
    1620: [51, 49, 58, 49, 38, 61, 55],
    1632: [21, 14, 11, 14, 15, 23, 14],
    1647: [8, 0, 0, 8, 3, 10, 48, 28, 11, 4],
    1659: [62, 22, 14, 23, 26, 15, 20, 9],
    1671: [-58, -23, -29, -11, -24, -18, -29, -89, -44, -61, -52, -89, -27, -14, -18, -21, -13, -89, -31, -24, -11, -89, -1, -65, -79],
    1683: [-44, -10, -3, -22, -2, -4, -25, -6, -4, -3],
    1697: [-58, -60, -49, -60, -45, -56, -62],
    1709: [-54, -56, -61, -56, -33, -60, -50],
    1716: [-45, -37, -37, -45, -40, -47, -21, -57, -48, -33],
    2022: [-120, -119, -110, -113, -128, -113, -123, -121, -110, -113, -119, -120],
    2172: [18, 19, 8, 21, 26, 21, 31, 29, 8, 21, 19, 18],
    2261: [-65, -76, -93, -76, -5, -71, -76, -69, -78, -5, -122, -84, -90, -95, -80, -72],
    2275: [-122, -101, -118, -105],
    2445: [-46, -46, -6, -24, -31, -18, -30, -32, -24, -46, -32, -24, -2, -2, -20, -22, -24, -46, -2, -27, -30, -6, -29, -46],
    2491: [-1, -14, -6, -9, -12, -4],
    2514: [-122, -99, -109, -127, -122],
    2537: [-89, -90, -67, -96, -81, -96, -86, -88, -67, -96, -90, -89],
    2638: [58, 43, 61, 58, 99, 37, 43, 55, 61],
    2649: [118, 42, 32, 42, 45, 60, 52, 118, 56, 41, 41, 118, 10, 44, 41, 60, 43, 44, 42, 60, 43, 119, 56, 41, 50],
    2678: [89, 5, 15, 5, 2, 19, 27, 89, 14, 20, 31, 24, 89, 5, 3],
    2734: [-127, -35, -41, -35, -38, -53, -61, -127, -42, -52, -57, -64, -127, -35, -37],
    2748: [-109, -49, -34, -43, -46, -109, -49, -55],
    2762: [-27, -71, -88, -93, -92, -27, -71, -65],
    2776: [-9, -85, -70, -79, -74, -9, -75, -71, -65, -79, -85, -77],
    2790: [-55, -107, -124, -113, -120, -55, -117, -121, -127, -113, -107, -115, -56, -124, -113, -120],
    2804: [-37, -121, -106, -99, -102, -37, -103, -107, -109, -99, -121, -97, -100, -99, -112, -111],
    2818: [45, 113, 96, 107, 108, 45, 111, 99, 101, 107, 113, 105, 107, 108, 107, 118],
    2832: [63, 99, 114, 121, 126, 63, 125, 113, 119, 121, 99, 123, 96, 127, 124, 121, 115, 105],
    2847: [48, 108, 102, 108, 107, 122, 114, 48, 126, 123, 123, 112, 113, 49, 123, 48, 38, 38, 50, 114, 126, 120, 118, 108, 116, 49, 108, 119],
    2861: [2, 78, 76, 78, 69, 72, 2, 64, 76, 74, 68, 94, 70, 3, 65, 66, 74],
    3098: [91, 106, 113, 74, 104, 117, 110, 127, 121, 110, 117, 104],
    3101: [88, 111, 111, 114, 111],
    3152: [17, 62, 52, 34, 63, 57, 52, 29, 49, 62, 57, 54, 53, 35, 36, 126, 40, 61, 60],
    3269: [-124, -75, -82, -107, -73, -86, -79, -96, -90, -79, -86, -73],
    3272: [-115, -70, -70, -89, -70],
    3345: [52, 33, 35, 73],
    3484: [-3, -14, -8, -18, -13, -11, -8, -78, -3, -20, -20, -78, -35, -20, -20, -37, -16, -13, -2, -3, -16, -17],
    3498: [-53, -60, -50, -40, -59, -61, -50, -124, -53, -38, -38, -124, -21, -38, -38, -58, -61, -55, -53, -34, -61, -59, -60],
    3512: [-33, -35, -52, -15, -42, -47, -52, -47, -39, -44, -7, -56, -56, -44, -47, -37, -39, -52, -47, -41, -42],
    3526: [-91, -76, -93, -89, -78, -93, -106, -89, -91, -83, -89, -95, -93, -123, -87, -88, -78, -93, -66, -78],
    3562: [-119, -123, -121, -60, -121, -119, -117, -122, -60, -114, -113, -110, -102, -104, -123, -98, -113, -119, -98],
    3584: [103, 101, 116, 80, 97, 99, 107, 97, 103, 101, 77, 97, 110, 97, 103, 101, 114],
    3621: [66, 64, 81, 108, 75, 86, 81, 68, 73, 73, 64, 87, 117, 68, 70, 78, 68, 66, 64, 107, 68, 72, 64],
    3647: [92, 80, 82, 17, 82, 92, 94, 83, 17, 91, 90, 71, 79, 77, 80, 75, 90, 92, 75],
    3667: [48, 60, 62, 125, 50, 61, 55, 33, 60, 58, 55, 125, 37, 54, 61, 55, 58, 61, 52]
}

def xor_decode(i):
    if i in data_map:
        bArr = bytearray(x & 0xFF for x in data_map[i])
        for i2 in range(len(bArr)):
            bArr[i2] = bArr[i2] ^ i & 0xFF
        try:
            print(i)
            print(bArr)
        except UnicodeDecodeError:
            print(f"i={i}: Decoding error, raw bytes: {bArr.tobytes()}")

# Gọi hàm cho tất cả các giá trị
for key in data_map.keys():
    xor_decode(key)
